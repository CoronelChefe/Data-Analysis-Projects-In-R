#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(question, ",")) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by_(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
install.packages("splitstackshape")
setwd("C:/Users/dsilv/Desktop/Learning/Data Science/Data-Analysis-Projects-In-R/Data Scientist Survey")
library(tidyverse)
library(stringr)
library(tm)
library(rlang)
library(splitstackshape)
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = cSplit(question, sep=",")) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by_(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = cSplit(splitCols = question, sep=",")) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by_(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(splitCols = question, ",")) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by_(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(question, ",")) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by_(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
strsplit(rawMCdata, "LearningPlatformSelect", ",")
strsplit(rawMCdata, as.character("LearningPlatformSelect"), ",")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE))
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by_(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE))
# Split answers are now nested, need to unnest them
#unnest(selections) %>%
group_by_(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE)) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by_(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE)) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by(!! sym(selections)) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE)) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by(!! (sym(selections))) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE)) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE)) %>%
# Split answers are now nested, need to unnest them
unlist(selections) %>%
group_by(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE)) %>%
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE))
# Split answers are now nested, need to unnest them
unnest(selections) %>%
group_by(selections) %>%
summarise(totalCount = max(totalCount),
count = n()) %>%
mutate(percent = (count / totalCount) * 100) %>%
arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
# A function to analyze questions where you choose multiple answers
multiChoice = function(question, filteredData = rawMCdata){
filteredData %>%
drop_na(question) %>%
select(question) %>%
# Add a column with the initial number of respondents to question
mutate(totalCount = n()) %>%
# Split multiple answers apart at the comma, but ignore commas inside parentheses
#mutate(selections = strsplit(as.character(question),
#                            '\\([^)]+,(*SKIP)(*FAIL)|,\\s*', perl = TRUE)) %>%
mutate(selections = strsplit(as.character(question), ", (?=[A-Z])", perl = TRUE))
# Split answers are now nested, need to unnest them
# unnest(selections) %>%
#  group_by(selections) %>%
# summarise(totalCount = max(totalCount),
#          count = n()) %>%
#mutate(percent = (count / totalCount) * 100) %>%
#arrange(desc(count))
}
multiChoice("LearningPlatformSelect")
# A function to analyze responses which are a single choice
singleChoice = function(question, filteredData = rawMCdata){
filteredData %>%
# Remove any rows where the respondent didn't answer the question
drop_na(question)  %>%
# Group by the responses to the question
group_by(!! (sym(question))) %>%
# Count how many respondents selected each option
summarise(count = n()) %>%
# Calculate what percent of respondents selected each option
mutate(percent = (count / sum(count)) * 100) %>%
# Arrange the counts in descending order
arrange(desc(count))
}
singleChoice("MLMethodNextYearSelect")
